@Library('jenkins-upstream-library') _

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.10-3.3'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }
    parameters {
        string(defaultValue: '', description: 'Current Build(quay image or build number)', name: 'CurrentBuild')
        string(defaultValue: '', description: 'Upgrade Build(quay image or build number)', name: 'UpgradeBuild')
        string(defaultValue: '', description: 'Next Upgrade Build(quay image or build number)', name: 'NextUpgradeBuild')
        validatingString(defaultValue: "4.9", name: "Release", description: "Current Build Release, eg. 4.9", regex: /^[0-9]\.[0-9]+$/, failedValidationMessage: "Please enter OCP releases like 4.9")
        validatingString(defaultValue: "4.11", name: "NextUpgradeRelease", description: "Next Upgrade Build Release, eg. 4.11", regex: /^[0-9]\.[0-9]+$/, failedValidationMessage: "Please enter OCP releases like 4.11")
        string(defaultValue: '720', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
        booleanParam(defaultValue: false, name: 'Rune2e', description: 'Select if you want to run e2e tests. E2e runs after cluster upgrade')
        booleanParam(defaultValue: false, name: 'DeployAcmeair', description: 'Select if you want to install acme-air application. It installs acme-air application before upgrade.')
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('IBM_PCLOUD_QE_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "1.2.0"

        //rdr-ocp-upi-validation-osa21 service instance
        IBM_CLOUD_REGION = "osa"
        IBM_CLOUD_ZONE   = "osa21"
        SERVICE_INSTANCE_ID = "219e149f-7dfc-4274-94ee-e6dcd3880233"
        VPCREGION = "jp-osa"
        RESOURCE_GROUP = "upi-resource-group"

        //Parameters
        OCP_RELEASE = "${params.Release}"
        NEXT_UPGRADE_RELEASE = "${params.NextUpgradeRelease}"
        CURRENT_BUILD = "${params.CurrentBuild}"
        UPGRADE_BUILD = "${params.UpgradeBuild}"
        NEXT_UPGRADE_BUILD = "${params.NextUpgradeBuild}"
        RHCOS_IMAGE="rhcos-${OCP_RELEASE}".replaceAll("\\.", "");
        RHCOS_IMAGE_FILE = "latest-${RHCOS_IMAGE}-rdr-ocp-upi-validation-osa21.txt"
        TIMEOUT = "${params.KeepFor}"
        ENABLE_ACME_AIR = "${params.DeployAcmeair}"
        
        //e2e specific variables
        ENABLE_E2E_TEST = "${params.Rune2e}"
        GOLANG_TARBALL = "https://golang.org/dl/go1.17.6.linux-ppc64le.tar.gz"
        
        //Makefile variables
        OPENSHIFT_POWERVS_GIT_TF_DEPLOY_BRANCH = "master" //The download branch

        TARGET = "deploy-openshift4-powervs"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = true
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "0"

        // Type of configuration
        CONFIG_TYPE = "min"

        // kdump Configuration
        KDUMP_ENABLE="false" 
    }

    stages {
        stage('Clone ocp4-playbook') {
            when { expression { return env.ENABLE_ACME_AIR == "true"; } }
            steps {
                cloneRepo("https://github.com/ocp-power-automation/ocp4-playbooks.git", "ocp4_playbooks")
            }
        }
        stage('Clone ansible extra') {
            when { expression { return env.ENABLE_E2E_TEST == "true"; } }
            steps {
                cloneRepo("https://github.com/ocp-power-automation/ocp4-playbooks-extras", "ocp4-playbooks-extras", "*/main")
            }
        }
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
                script {
                    wrap([$class: 'BuildUser']) {
                        env.INSTANCE_NAME = "rdr-qe-ocp-upi"
                   }
                    env.E2E_BRANCH = "release-${env.NEXT_UPGRADE_RELEASE}"
                    env.UPGRADE_DELAY_TIME = "600"
                    env.UPGRADE_PAUSE_TIME = "90"
                    if (NEXT_UPGRADE_RELEASE == "4.5" || NEXT_UPGRADE_RELEASE == "4.6" ) {
                        env.E2E_EXCLUDE_LIST = "https://raw.github.ibm.com/redstack-power/e2e-exclude-list/${env.NEXT_UPGRADE_RELEASE}-powervm/ocp${env.NEXT_UPGRADE_RELEASE}_power_exclude_list.txt"
                    }
                    else{
                        env.E2E_EXCLUDE_LIST = "https://raw.github.ibm.com/redstack-power/e2e-exclude-list/${env.NEXT_UPGRADE_RELEASE}-powervs/ocp${env.NEXT_UPGRADE_RELEASE}_power_exclude_list.txt"
                    }
                    if (env.OCP_RELEASE == "4.9" || env.OCP_RELEASE == "4.10"){
                        env.BASTION_IMAGE = "rhel-86"
                    } else {
                        env.BASTION_IMAGE = "rhel-85"
                    }
                    env.BASTION_IMAGE_FILE = "latest-${BASTION_IMAGE}-rdr-ocp-upi-validation-osa21.txt"       
                }
            }
        }
        stage('pull artifact') {
            steps {
                script {
                    getArtifacts("powervs/poll-powervs-images", "${BASTION_IMAGE_FILE}")
                    getArtifacts("powervs/poll-powervs-images", "${RHCOS_IMAGE_FILE}" )
                }
            }
        }
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        pullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        if (env.CURRENT_BUILD?.trim()) {
                            if (!env.CURRENT_BUILD.contains('quay')) {
                                env.OPENSHIFT_IMAGE  = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${env.CURRENT_BUILD}"
                                sh '''
                                    apt update
                                    apt install docker docker.io jq -y
                                    docker login sys-powercloud-docker-local.artifactory.swg-devops.com -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
                                    docker pull ${OPENSHIFT_IMAGE}
                                    if [ $? -ne 0 ]; then
                                        echo "${OPENSHIFT_IMAGE}  not found"
                                        exit 1
                                    fi
                                '''
                            }
                            else {
                               env.OPENSHIFT_IMAGE = env.CURRENT_BUILD
                            }
                        }
                        else {
                            echo "Current build is empty! Please check parameters."
                            throw err
                        }

                        if (env.UPGRADE_BUILD?.trim()) {
                            if (!env.UPGRADE_BUILD.contains('quay')) {
                                env.OCP_UPGRADE_IMAGE  = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${env.UPGRADE_BUILD}"
                                sh '''
                                    docker login sys-powercloud-docker-local.artifactory.swg-devops.com -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
                                    docker pull ${OCP_UPGRADE_IMAGE}
                                    if [ $? -ne 0 ]; then
                                        echo "${OCP_UPGRADE_IMAGE} not found"
                                        exit 1
                                    fi
                                '''
                            }
                            else {
                               env.OCP_UPGRADE_IMAGE = env.UPGRADE_BUILD
                            }
                        }
                        else{
                            echo "Upgrade build is empty! Please check parameters."
                            throw err
                        }
                        
                        if (env.NEXT_UPGRADE_BUILD?.trim()) {
                            if (!env.NEXT_UPGRADE_BUILD.contains('quay')) {
                                env.OCP_NEXT_UPGRADE_IMAGE  = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${env.NEXT_UPGRADE_BUILD}"
                                sh '''
                                    docker login sys-powercloud-docker-local.artifactory.swg-devops.com -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
                                    docker pull ${OCP_NEXT_UPGRADE_IMAGE}
                                    if [ $? -ne 0 ]; then
                                        echo "${OCP_NEXT_UPGRADE_IMAGE} not found"
                                        exit 1
                                    fi
                                '''
                            }
                            else {
                               env.OCP_NEXT_UPGRADE_IMAGE = env.NEXT_UPGRADE_BUILD
                            }
                        }
                        else{
                            echo "Next Upgrade build is empty"
                            throw err
                        }

                        if (fileExists("deploy/artifactory/${BASTION_IMAGE_FILE}")) {
                            env.BASTION_IMAGE_NAME = readFile "deploy/artifactory/${BASTION_IMAGE_FILE}"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE_NAME.trim()
                        }
                        else{
                            echo "${BASTION_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/${RHCOS_IMAGE_FILE}")) {
                            env.RHCOS_IMAGE_NAME = readFile "deploy/artifactory/${RHCOS_IMAGE_FILE}"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE_NAME.trim()
                        }
                        else{
                            echo "${RHCOS_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment("${VPCREGION}","${RESOURCE_GROUP}")
            }
        }
        stage('Setup Terraform Plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Validate CO status') {
            steps {
                validateCoStatus()
            }
        }
        stage('Deploy acme-air applpication') {
            when { expression { return env.ENABLE_ACME_AIR == "true"; } }
            steps {
                runAcmeair()
            }
        }
        stage('Upgrade the cluster') {
            steps {
                script{
                    env.UPGRADE_IMAGE = env.OCP_UPGRADE_IMAGE
                    setupAndUpgrade()
                }
            }    
        }  
        stage('Validate CO status after first upgradation') {
            steps {
                validateCoStatus()
            }
        }
        stage('Upgrade to next upgrade build') {
            steps {
                script{
                    env.UPGRADE_IMAGE = env.OCP_NEXT_UPGRADE_IMAGE
                    setupAndUpgrade()
                }
            }    
        }
        stage('Validate CO status after second upgradation') {
            steps {
                validateCoStatus()
            }
        }
        stage('Setup and run ansible extra') {
            when { expression { return env.ENABLE_E2E_TEST == "true"; } }
            steps {
               setupAndRunE2e()
               notifyBySlack(currentBuild.result, "E2E has completed !!")
            }
        }
        stage('Gather pprof and prometheus data') {
            steps {
                gatherPrometheusData()
            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                            TIMEOUT_MIN = TIMEOUT.toInteger()
                            if ( TIMEOUT_MIN != 0 )
                            {
                                TIMEOUT_SEC=TIMEOUT_MIN*60
                                echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                                sleep TIMEOUT_SEC
                            }
                        }
                    catch (err) {
                            echo 'Error ! Timeout stage failed!'
                            env.FAILED_STAGE=env.STAGE_NAME
                            throw err
                    }
                }
            }
        }
    }
    post {
        always {
            script{
                try{
                    archiveAllArtifacts("deploy/conformance-parallel-out.txt.tar.gz", "deploy/summary.txt", "deploy/vars.tfvars",
                        "cpu-pre.pprof", "heap-pre.pprof", "prometheus.tar.gz", "deploy/cron.log", "must-gather.tar.gz")
                    cleanupOcp4Cluster()
                    checkInfraError()
                    processE2eResults()
                    dbDashboardUpdateE2e()
                    notifyBySlack(currentBuild.result, env.MESSAGE)
                }
                catch (err){
                    echo 'Error ! Always block failed!' 
                }
                finally{
                    cleanWs()
                }
            }
        }
    }
}
