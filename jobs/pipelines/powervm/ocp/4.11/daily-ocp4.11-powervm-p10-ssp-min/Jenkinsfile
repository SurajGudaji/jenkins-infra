@Library('jenkins-upstream-library') _

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.10-3.3'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        OS_USERNAME = credentials('OS_USERNAME')
        OS_PASSWORD = credentials('OS_PASSWORD')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        ARTIFACTORY_TOKEN = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')
        OS_AUTH_URL=credentials('URL_SCNLCICDPOWERVC')

        //Env constants
        HARDWARE_CHOSE = "P10"
        TERRAFORM_VER = "1.2.0"
        AVAILABILITY_ZONE = "p10_pvm"
        OCP_RELEASE="4.11"
        TARGET = "deploy-openshift4-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = false
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "1"
        REDHAT_RELEASE = "8.6"

        //Branch
        OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="main"//The download branch

        //E2e and Scale specific variables
        ENABLE_E2E_TEST="true"
        ENABLE_SCALE_TEST="false"
        GOLANG_TARBALL="https://dl.google.com/go/go1.17.6.linux-ppc64le.tar.gz"

        // Type of configuration
        CONFIG_TYPE="min"

        // kdump Configuration
        KDUMP_ENABLE="false"
	 }

    stages {
        stage('Clone ansible extra') {
            steps {
                cloneRepo("https://github.com/ocp-power-automation/ocp4-playbooks-extras", "ocp4-playbooks-extras", "*/main")
            }
        }
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
                script {
                //ssp specific variables
                env.SCG_ID = "06b0155e-d6a5-4ca9-b15f-ff056766c0b0"
                env.VOLUME_STORAGE_TEMPLATE = "ocp_ssp base template"
                }
            }
        }
        stage('pull artifact') {
            steps {
                script {
                    getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt")
                }
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        gbToMb()
                        pullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-build.txt")) {
                            env.OPENSHIFT_IMAGE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-build.txt"
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        env.RHCOS_IMAGE_NAME = "ssp-cicd-rhcos-411.85.202203090210-0-openstack.ppc64le"
                        env.RHCOS_IMAGE_ID = "d4a6dacc-17c0-498c-b54c-53afcb3c080d"

                        env.BASTION_IMAGE_NAME = "ssp-cicd-rhel8_5_2021-12-13-ppc64le"
                        env.BASTION_IMAGE_ID = "0225d9fd-605c-4665-8f23-4947213e7497"
                        if (env.DEPLOY_MASTER == "false")
                        {
                            echo "Cluster cant deploy without master"
                            throw err
                        }

                        createTemplate(env.OS_AUTH_URL, env.MASTER_VCPUS , "${MASTER_MEMORY_MB}", env.MASTER_PROCESSORS, env.MASTER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.WORKER_VCPUS , "${WORKER_MEMORY_MB}", env.WORKER_PROCESSORS, env.WORKER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BASTION_VCPUS , "${BASTION_MEMORY_MB}", env.BASTION_PROCESSORS, env.BASTION_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BOOTSTRAP_VCPUS , "${BOOTSTRAP_MEMORY_MB}", env.BOOTSTRAP_PROCESSORS, env.BOOTSTRAP_TEMPLATE)
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
            }
        }
        stage('Setup Terraform Plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Setup and run ansible extra') {
            steps {
               setupAndRunE2e()
            }
        }
        stage('Gather pprof and prometheus data') {
            steps {
                //gatherPrometheusData()
                echo "gatherPrometheusData() is skipped for now"
            }
        }
    }
    post {
        always {
            archiveAllArtifacts("deploy/conformance-parallel-out.txt.tar.gz", "deploy/summary.txt", "deploy/vars.tfvars",
                "cpu-pre.pprof", "heap-pre.pprof", "prometheus.tar.gz", "deploy/cron.log", "must-gather.tar.gz")
            cleanupOcp4Cluster()
            checkInfraError()
            processE2eResults()
            dbDashboardUpdateE2e()
            notifyBySlack(currentBuild.result, env.MESSAGE)
            cleanWs()
        }
    }
}
